package sandbox;

/*Generated by MPS */

import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.Dimension;

public class DimaMarty extends JFrame {
  public int robotX = 0;
  public int robotY = 0;
  public int robotHeadingDirection = 0;

  public int bordersX = 0;
  public int bordersY = 0;
  public int bordersWidth = 0;
  public int bordersHeight = 0;

  private JPanel panel = new JPanel() {

    @Override
    protected void paintComponent(Graphics graphics) {
      super.paintComponent(graphics);
      bordersX = 10;
      bordersY = 10;
      System.out.println("BORDERS-Y=" + bordersY + " BORDERS-Y-INPUT=" + 10);
      bordersWidth = 800;
      bordersHeight = 600;

      robotX = 500;
      robotY = 500;
      robotHeadingDirection = 1;

      graphics.drawRect(10, 10, 800, 600);
      bordersY = 10;
      System.out.println("INPUT_BORDERS_Y=" + 10);
      System.out.println("x:" + robotX);
      System.out.println("y:" + robotY);
      System.out.println("direction:" + robotHeadingDirection);

      moveForward(100, graphics);
      turn(0);
      moveForward(50, graphics);
      turn(0);
      moveForward(300, graphics);
      turn(1);
      moveForward(100, graphics);
      turn(1);
      moveForward(3000, graphics);

    }

    public void moveForward(int distance, Graphics graphics) {
      System.out.println("Hey Marty Im in moveForward! The distance is " + distance);
      int endX = robotX;
      int endY = robotY;
      switch (robotHeadingDirection) {
        case 1:
          endY = robotY - distance;
          break;
        case 3:
          endY = robotY + distance;
          break;
        case 2:
          endX = robotX + distance;
          break;
        case 4:
          endX = robotX - distance;
          break;
        default:
          break;
      }
      System.out.println("endY=" + endY + " bordersY=" + bordersY);
      if (endX >= (bordersX + bordersWidth)) {
        endX = (bordersX + bordersWidth) - 1;
      } else if (endX <= bordersX) {
        endX = bordersX + 1;
      }

      if (endY >= (bordersY + bordersHeight)) {
        endY = (bordersY + bordersHeight) - 1;
      } else if (endY <= bordersY) {
        endY = bordersY + 1;
      }

      System.out.println("robot: x=" + robotX + ", y=" + robotY + " | end: x=" + endX + ", y=" + endY);
      graphics.setColor(Color.RED);
      graphics.drawLine(robotX, robotY, endX, endY);

      robotX = endX;
      robotY = endY;
    }

    public void turn(int turnDirection) {
      System.out.println("Hey Dima Im in turn method! The turning direction is " + turnDirection);
      if (turnDirection == 0) {
        switch (robotHeadingDirection) {
          case 1:
            robotHeadingDirection = 4;
            break;
          case 3:
            robotHeadingDirection = 2;
            break;
          case 2:
            robotHeadingDirection = 1;
            break;
          case 4:
            robotHeadingDirection = 3;
            break;
          default:
            break;
        }

      } else if (turnDirection == 1) {
        switch (robotHeadingDirection) {
          case 1:
            robotHeadingDirection = 2;
            break;
          case 3:
            robotHeadingDirection = 4;
            break;
          case 2:
            robotHeadingDirection = 3;
            break;
          case 4:
            robotHeadingDirection = 1;
            break;
          default:
            break;
        }
      }
      System.out.println("The new heading direction is " + robotHeadingDirection);

    }

  };


  private void initialize() {
    this.setTitle("Test - it's not a var");
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    this.add(panel);
    panel.setPreferredSize(new Dimension(1000, 1000));
    this.pack();
    this.setVisible(true);

    bordersX = 10;
    bordersY = 10;
    System.out.println("BORDERS-Y=" + bordersY + " BORDERS-Y-INPUT=" + 10);
    bordersWidth = 800;
    bordersHeight = 600;

    robotX = 500;
    robotY = 500;
    robotHeadingDirection = 1;
  }

  public static void main(String[] args) {
    DimaMarty boundary = new DimaMarty();
    boundary.initialize();
  }
}
