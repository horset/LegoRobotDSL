package ExtendedRoute.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(3);
  /*package*/ final ConceptDescriptor myConceptExtendedBoundary = createDescriptorForExtendedBoundary();
  /*package*/ final ConceptDescriptor myConceptExtendedForward = createDescriptorForExtendedForward();
  /*package*/ final ConceptDescriptor myConceptVariable = createDescriptorForVariable();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptExtendedBoundary.getId(), 0);
    myIndexMap.put(myConceptExtendedForward.getId(), 1);
    myIndexMap.put(myConceptVariable.getId(), 2);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptExtendedBoundary, myConceptExtendedForward, myConceptVariable);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptExtendedBoundary;
      case 1:
        return myConceptExtendedForward;
      case 2:
        return myConceptVariable;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForExtendedBoundary() {
    return new ConceptDescriptorBuilder("ExtendedRoute.structure.ExtendedBoundary", MetaIdFactory.conceptId(0xa5d66f41ca624173L, 0x8886f304545762baL, 0x1f9fb2132e11d11bL)).super_("Route.structure.Boundary").version(1).super_(MetaIdFactory.conceptId(0xba1a442e6df4098L, 0x83cba42e17c80f15L, 0x7d459d94371a2275L)).parents("Route.structure.Boundary").parentIds(MetaIdFactory.conceptId(0xba1a442e6df4098L, 0x83cba42e17c80f15L, 0x7d459d94371a2275L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1f9fb2132e1214caL, "variables", MetaIdFactory.conceptId(0xa5d66f41ca624173L, 0x8886f304545762baL, 0x1f9fb2132e12148dL), false, true, false, new SNodePointer("r:9f595097-7afd-4aa6-8a6c-16eb5d58f646(ExtendedRoute.structure)", "2278735731919819978"))).children(new String[]{"variables"}, new boolean[]{true}).rootable().alias("extendedBoundary", "").sourceNode(new SNodePointer("r:9f595097-7afd-4aa6-8a6c-16eb5d58f646(ExtendedRoute.structure)", "2278735731919802651")).create();
  }
  private static ConceptDescriptor createDescriptorForExtendedForward() {
    return new ConceptDescriptorBuilder("ExtendedRoute.structure.ExtendedForward", MetaIdFactory.conceptId(0xa5d66f41ca624173L, 0x8886f304545762baL, 0x1f9fb2132e120fddL)).super_("Route.structure.Step").version(1).super_(MetaIdFactory.conceptId(0xba1a442e6df4098L, 0x83cba42e17c80f15L, 0xdd22d76a134dc10L)).parents("Route.structure.Step").parentIds(MetaIdFactory.conceptId(0xba1a442e6df4098L, 0x83cba42e17c80f15L, 0xdd22d76a134dc10L)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x4656db99c97be5fL, "variable", MetaIdFactory.conceptId(0xa5d66f41ca624173L, 0x8886f304545762baL, 0x1f9fb2132e12148dL), false, new SNodePointer("r:9f595097-7afd-4aa6-8a6c-16eb5d58f646(ExtendedRoute.structure)", "316779992763055711"))).references("variable").alias("forward", "").sourceNode(new SNodePointer("r:9f595097-7afd-4aa6-8a6c-16eb5d58f646(ExtendedRoute.structure)", "2278735731919818717")).create();
  }
  private static ConceptDescriptor createDescriptorForVariable() {
    return new ConceptDescriptorBuilder("ExtendedRoute.structure.Variable", MetaIdFactory.conceptId(0xa5d66f41ca624173L, 0x8886f304545762baL, 0x1f9fb2132e12148dL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x1f9fb2132e1214c7L, "value", new SNodePointer("r:9f595097-7afd-4aa6-8a6c-16eb5d58f646(ExtendedRoute.structure)", "2278735731919819975"))).properties("value").sourceNode(new SNodePointer("r:9f595097-7afd-4aa6-8a6c-16eb5d58f646(ExtendedRoute.structure)", "2278735731919819917")).create();
  }
}
